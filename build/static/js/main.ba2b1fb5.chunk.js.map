{"version":3,"sources":["services/persons.js","people.js","filter.js","person-form.js","notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","updatedContact","put","People","people","deletePerson","map","person","key","name","number","onClick","Filter","handleFilterChange","onChange","PersonForm","handleSubmit","handleNameChange","handleNumberChange","onSubmit","type","Notification","message","className","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filter","setNewFilter","notificationMessage","setnotificationMessage","notificationType","setnotificationType","useEffect","personService","initialPersons","peopleToShow","toLowerCase","includes","notifyUser","setTimeout","e","target","value","event","preventDefault","duplicatePerson","find","newContact","window","confirm","returnedContact","newContacts","catch","concat","n","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ba2b1fb5.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst update = (id, updatedContact) => {\n  const request = axios.put(`${baseUrl}/${id}`, updatedContact)\n  return request.then(response => response.data)\n}\n\nexport default { \n  getAll: getAll, \n  create: create,\n  remove: remove,\n  update: update\n}","import React from 'react';\n\nconst People = ({people, deletePerson}) => (\n    <div>\n        {people.map(person => \n            <p key={person.name}>{person.name} {person.number} <button onClick={() => deletePerson(person)}>delete</button></p>  \n        )}\n    </div>\n);\n\n\n\nexport default People;","import React from 'react';\n\nconst Filter = ({handleFilterChange}) => (\n    <form>\n        <div>filter shown with <input onChange={handleFilterChange}/></div>\n    </form>\n);\n\nexport default Filter;","import React from 'react';\n\nconst PersonForm = ({handleSubmit, handleNameChange, handleNumberChange}) => (\n    <form onSubmit={handleSubmit}>\n        <div>name: <input onChange={handleNameChange} /></div>\n        <div>number: <input onChange={handleNumberChange} /></div>\n        <div><button type=\"submit\">add</button></div>\n      </form>\n);\n\nexport default PersonForm;","import React from 'react';\n\nconst Notification = ({message, type}) => {\n   \n    if (message === null) {\n        return null\n      }\n    \n      return (\n        <div className={`notification ${type}`}>\n          {message}\n        </div>\n      )\n}\n\nexport default Notification;","import React, { useState, useEffect } from 'react';\nimport './index.css'\n\nimport personService from './services/persons';\n\nimport People from './people';\nimport Filter from './filter';\nimport PersonForm from './person-form';\nimport Notification from './notification';\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('');\n  const [ newNumber, setNewNumber ] = useState('');\n  const [ filter, setNewFilter ] = useState('');\n  const [notificationMessage, setnotificationMessage] = useState(null);\n  const [notificationType, setnotificationType] = useState('');\n\n  useEffect(() => {\n    personService\n      .getAll()\n        .then( initialPersons => {\n          setPersons(initialPersons)\n        })\n  }, [])\n\n  const peopleToShow = filter \n    ? persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\n    : persons;\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const duplicatePerson = persons.find((person) => person.name === newName);\n    const newContact = {\n      name : newName,\n      number: newNumber\n    }\n\n    if(duplicatePerson) {\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n                         \n        personService.update(duplicatePerson.id, newContact)\n          .then( returnedContact => {\n            const newContacts = persons.map(person => person.id !== returnedContact.id ? person : returnedContact)\n            setPersons(newContacts);\n            notifyUser(`Number updated for ${newName}`, 'green');\n          })\n          .catch(() => {\n            notifyUser(`${newName} was already removed`, 'red')\n          }\n          );\n      }\n    }\n    else {\n     \n      personService\n        .create(newContact)\n        .then(() => {\n          setPersons(persons.concat(newContact))\n          notifyUser(`Added ${newName}`, 'green')\n        });\n    }\n  }\n\n  const notifyUser = (message, type) => {\n\n    setnotificationType(type);\n    setnotificationMessage(message);\n\n    setTimeout(() => {\n      setnotificationMessage(null)\n    }, 2000)\n  }\n\n  const deletePerson = (person) => {\n    if (window.confirm(`delete ${person.name} ?`)) {\n      personService\n        .remove(person.id)\n          .then(() => {\n            setPersons(persons.filter(n => n.id !== person.id))\n            setnotificationType('success');\n            notifyUser(`${person.name} removed`, 'green');\n          }\n          );\n    }\n  }\n\n  const handleNameChange = (e) => {\n    const name = e.target.value;\n\n    setNewName(name);\n  }\n\n  const handleNumberChange = (e) => {\n    const number = e.target.value;\n\n    setNewNumber(number);\n  }\n\n  const handleFilterChange = (e) => {\n    const filter = e.target.value;\n\n    setNewFilter(filter);\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification \n        message={notificationMessage}\n        type={notificationType}\n      />\n      <Filter handleFilterChange={handleFilterChange} />\n      <h2>add a new</h2>\n      <PersonForm \n        handleSubmit={handleSubmit}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <People \n        people={peopleToShow} \n        deletePerson={deletePerson}\n      />\n    </div>\n  )\n\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}